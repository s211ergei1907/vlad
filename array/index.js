// let arr = [
//   "Ваня",
//   true,
//   {
//     name: "Сергей",
//     age: 20,
//     description: {
//       first: "I am boxer",
//       two: "I am react-developer",
//     },
//   },
// ];

// console.log(arr[2].description.first);
// console.log(arr.length);

//! Очередь и стек
//Очередь - имеет два вида операций
// 1. Добавление элемента в конец очереди
// 2. Удаление элемента в начале, сдвигая очередь, так что второй элемент становится первым

// Структура данынх - стек
// 1. Добавление элемента в конец
// 2. Удаление последнего элемента

// Массивы в js могут работать и как очередь и как стек для этого нам могут помочь следующие методы:

//! Методы массива

// 1) Метод push(В реакте вроде не стоит использовать)
// arr.push(10);
// console.log(arr);

//2) Метод шифт удаляет первый элемент(так что второй элемент становится первым)
// arr.shift();

//3) Метод pop удаляет последний элемент в массиве
// arr.pop();

// 4) Метод unshift добавляет элемент в начало массива, тем самым сдвигает все остальные
// arr.unshift('мама', 12);
// arr[0] === 'мама' ? arr.shift() : console.log('Зимой в царя горы, ебаные звери');

//push и pop быстрые методы, а shift and unshift ебать медленные.

// Как удалить какой-то определенный элемент в массиве?
// 5) Метод splice позволяет добавлять, удалять и заменять элементы

// Удалить опеределенный элемент
// let arrOne = ['Ваня','Саня','Овсянка']
// arrOne.splice(1, 1);

//Заменить элемент
// let arrTwo = ['Ваня','Саня','Овсянка']
// arrTwo.splice(0, 1, 'Коля из вписки')
// console.log(arrTwo);

//Добавляем элементы
// let arrThree = ['Ваня','Саня','Овсянка'];
// arrThree.splice(1, 0, 'Коля', 'Маша');
// console.log(arrThree);

//Удаляем последний элемент
// let arrFour = ['Ваня','Саня','Овсянка'];
// arrFour.splice(-1, 1);
// console.log(arrFour);

// 6) копирует часть либо весь исходный массив (конечная позиция не включается)
// let copyArr = arr.slice(start, end)

// 7) Метод concat создает ноывй массив, в которй копирует данные из других массивов
// let copyArr = arr.concat('Петя')

//! Поиск по массиву
// 8)Методы indexOf/LastIndexOf и includes

// 1. arr.indexOf(item, from) ищет item, начиная с индекса from и возвращает индекс, на котором был найдет искомый элемент, в противном случае вернет 1
//2. arr.lasrIndexOf(item, from) - тоже самое справа налево
// 3.arr.includes(item, from) - ищет item, начиная с индекса from и возвращает true, если поиск успешен

// 9) find and findIndex
// Поиск в массиве с определенным условием  и возвращают элемент первый попавшиеся, если удовлятворяет условию
//Если он находит элемент массива, для которого callback возвращает логическое значение true, find() возвращает значение этого элемента массива (и не проверяет оставшиеся значения).
// В противном случае find() возвращает undefined.

// let arrik = [
//   {name:'Вася', age: 36},
//   {name:'Коля', age: 18},
//   {name:'Ольга', age: 22}
// ]

// let resultFind = arrik.find((item, index) => (item.age === 18));
// console.log(resultFind);

// Все тоже самое, только возвращает позицию элемента в массиве
// let resultFindIndex = arrik.findIndex((item, index) => (item.age === 18));
// console.log(resultFindIndex);


//!10) Ебейший парень! Метод filter
// Он не прекращает свою работу, если нашел нужный элемент, а ебашит дальше
//Метод filter ищет все элементы, на которых функция callback вернет true

// let result  = arrik.filter((item, index) => item.age > 18);
// console.log(result);

//11)Методы сортировки массива sort
// const arrNeedSort = [8, 22, 13, 1]
// ;
// const compareNumeric = (a, b) => {
//   if (a > b) return 1;
//   if (a === b) return 0;
//   if (a < b) return -1;
// };
// console.log(arrNeedSort.sort(compareNumeric);
// console.log(arrNeedSort.sort((a, b) => a - b));

//12) Метод reverse меняет порядок элементов на обратный
// arr.reverse()


// !Методы для преобразования массивов
// 13) Метод map вызывает функцию для каждого элемента массива и возвращает новый массив результатов выполнения этой функции

//Возвращает только первую букву с каждого элемента 
// let arr = ['Серега', 'Влад', 'ДИлья'];
// let result =  arr.map((item, index) => item[0]) 
// console.log(result);

// 14) Метод split 
//Метод split преобразует строку в массив по заданному разделителю 
// Синтакис строка.split('ставим то, как их разделять, к примеру запятую или пробел')
// let str = 'Ваня, Лена, Катя, Карина, Арина, Марина';

// let arr = str.split(', ');
// console.log(arr);

// 15) Метод join преобразует массив в строку с заданным разделителем:
// let arr = ['Ваня', 'Лена', 'Катя'];
// console.log(arr.join(','));

//16) Перебор массива

// Если нужны только значения
// for (let arrItem of arr){
//   console.log(arrItem);
// }

// 17) метод перебора forEach, выполняет функцию для каждого элемента массива
// let arr = ['Ваня', 'Лена', 'Катя'];

// arr.forEach((item, index, array) => {
//   console.log(`${item} находится на ${index} позиции в массиве ${array}`);
// });

// 18) Метод reduce
// Используются для вычисления какого-нибудь единого значения на основе всего массива

// acc - принимает результат предыдущего вызова этой функции
// Начальное значения acc - это второй параметр reduce
// Функция применяется по очереди ко всем элементам массива и переносит свой результат на следующий вызов
let value = arr.reduce((acc, item, index) => item + acc, 0);

